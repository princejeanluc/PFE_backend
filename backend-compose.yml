services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: django_backend
    command:
      - sh
      - -c
      - >
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --threads 4 --timeout 60 --graceful-timeout 30 --keep-alive 5
    ports: ["9092:8000"]
    env_file: [".env"]
    enviroonment:
      - PYTHONPATH=/app
    # volumes: ["./:/app"]  <-- ENLEVER en PROD
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django_backend.rule=Host(`api-posa.princejeanluc.work`)"
      - "traefik.http.routers.django_backend.entrypoints=websecure"
      - "traefik.http.routers.django_backend.tls=true"
      - "traefik.http.routers.django_backend.tls.certresolver=le"
      - "traefik.http.services.django_backend.loadbalancer.server.port=8000"

  mcp:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: mcp_server
    command: ["python", "mcp_server.py"]
    ports: ["1445:1445"]        # garde un port MCP unique et stable
    env_file: [".env"]
    environment:
      - PYTHONPATH=/app
    depends_on: ["web"]
    
    # volumes: ["./:/app"]  <-- ENLEVER en PROD

  scraper:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: crypto_scraper
    command:
      - python
      - -u
      - -c
      - |
        import time, schedule, subprocess
        def job():
            subprocess.run(['python', 'launch_task_cryptopanic.py'], cwd='/app')
        schedule.every().hour.do(job)
        job()
        while True:
            schedule.run_pending()
            time.sleep(60)
    env_file: [".env"]
    environment:
      - PYTHONPATH=/app
    depends_on: ["web"]
  periodic_worker:
      build:
        context: .
        dockerfile: Dockerfile.backend
      container_name: periodic_worker
      command:
        - python
        - -u
        - -c
        - |
          import os, time, schedule, subprocess, traceback, datetime as dt
          TARGET = os.getenv("PERIODIC_SCRIPT", "worker.py")
          def log(msg): print(f"[{dt.datetime.utcnow().isoformat()}Z] {msg}", flush=True)
          def job():
              try:
                  log(f"Running {TARGET} ...")
                  r = subprocess.run(['python', TARGET], cwd='/app', check=True)
                  log(f"Done {TARGET} (rc={r.returncode})")
              except Exception:
                  log("ERROR:\n" + traceback.format_exc())
          schedule.every(30).minutes.do(job)   # ← toutes les 30 minutes
          job()                                 # premier run immédiat (optionnel)
          while True:
              schedule.run_pending()
              time.sleep(30)
      env_file: [".env"]
      environment:
        - PYTHONPATH=/app
        # Optionnel: définir le fichier à exécuter sans modifier le compose
        - PERIODIC_SCRIPT=worker.py
      depends_on: ["web"]
    # volumes: ["./:/app"]  <-- ENLEVER en PROD

networks:
  web:
    external: true
