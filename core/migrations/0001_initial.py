# Generated by Django 4.2.23 on 2025-08-07 15:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PosaUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('credits', models.IntegerField(default=100)),
                ('type', models.CharField(max_length=100)),
                ('has_accepted_terms', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Crypto',
            fields=[
                ('id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('symbol', models.CharField(max_length=10)),
                ('image_url', models.URLField(blank=True, max_length=500, null=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='MarketSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('price', models.FloatField()),
                ('volume', models.FloatField()),
                ('hourly_return', models.FloatField()),
                ('news_positive_votes', models.IntegerField(default=0)),
                ('news_negative_votes', models.IntegerField(default=0)),
                ('sentiment_score', models.FloatField(blank=True, null=True)),
                ('predicted_frequency', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('crypto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.crypto')),
            ],
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('holding_start', models.DateField()),
                ('holding_end', models.DateField()),
                ('initial_budget', models.FloatField()),
                ('allocation_type', models.CharField(choices=[('manual', 'Manuelle'), ('autom', 'Automatique')], max_length=20)),
                ('objective', models.CharField(blank=True, choices=[('max_return', 'Maximiser le rendement'), ('min_volatility', 'Minimiser la volatilit√©'), ('sharpe', 'Maximiser le ratio de Sharpe')], max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolios', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('url', models.URLField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='UserAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(max_length=100)),
                ('cost_in_credits', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_name', models.CharField(default='default_model_v1', max_length=100)),
                ('predicted_log_return', models.FloatField()),
                ('predicted_price', models.FloatField(blank=True, null=True)),
                ('predicted_date', models.DateTimeField()),
                ('predicted_volatility', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('crypto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.crypto')),
                ('market_snapshot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='core.marketsnapshot')),
            ],
        ),
        migrations.CreateModel(
            name='PortfolioPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('value', models.FloatField()),
                ('cumulative_return', models.FloatField()),
                ('volatility', models.FloatField(blank=True, null=True)),
                ('sharpe_ratio', models.FloatField(blank=True, null=True)),
                ('drawdown', models.FloatField(blank=True, null=True)),
                ('sortino_ratio', models.FloatField(blank=True, null=True)),
                ('expected_shortfall', models.FloatField(blank=True, null=True)),
                ('value_at_risk', models.FloatField(blank=True, null=True)),
                ('information_ratio', models.FloatField(blank=True, null=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='core.portfolio')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='New',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1000)),
                ('url', models.URLField(max_length=500)),
                ('datetime', models.DateTimeField()),
                ('summary', models.TextField(default='')),
                ('sentiment_score', models.FloatField(blank=True, null=True)),
                ('positive', models.IntegerField(default=0)),
                ('negative', models.IntegerField(default=0)),
                ('tags', models.CharField(blank=True, max_length=255, null=True)),
                ('cryptos', models.ManyToManyField(related_name='news', to='core.crypto')),
                ('source', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles', to='core.source')),
            ],
        ),
        migrations.CreateModel(
            name='Holding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allocation_percentage', models.FloatField()),
                ('quantity', models.FloatField()),
                ('purchase_price', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('crypto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.crypto')),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='core.portfolio')),
            ],
        ),
        migrations.CreateModel(
            name='ExogeneousVariables',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(blank=True, null=True)),
                ('name', models.CharField(default='interest', max_length=100)),
                ('timestamp', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('crypto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.crypto')),
            ],
        ),
        migrations.CreateModel(
            name='CryptoInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('current_price', models.FloatField(blank=True, null=True)),
                ('market_cap', models.BigIntegerField(blank=True, null=True)),
                ('market_cap_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('fully_diluted_valuation', models.BigIntegerField(blank=True, null=True)),
                ('total_volume', models.BigIntegerField(blank=True, null=True)),
                ('high_24h', models.FloatField(blank=True, null=True)),
                ('low_24h', models.FloatField(blank=True, null=True)),
                ('price_change_24h', models.FloatField(blank=True, null=True)),
                ('price_change_percentage_24h', models.FloatField(blank=True, null=True)),
                ('market_cap_change_24h', models.BigIntegerField(blank=True, null=True)),
                ('market_cap_change_percentage_24h', models.FloatField(blank=True, null=True)),
                ('circulating_supply', models.FloatField(blank=True, null=True)),
                ('total_supply', models.FloatField(blank=True, null=True)),
                ('max_supply', models.FloatField(blank=True, null=True)),
                ('ath', models.FloatField(blank=True, null=True)),
                ('ath_change_percentage', models.FloatField(blank=True, null=True)),
                ('ath_date', models.DateTimeField(blank=True, null=True)),
                ('atl', models.FloatField(blank=True, null=True)),
                ('atl_change_percentage', models.FloatField(blank=True, null=True)),
                ('atl_date', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(blank=True, null=True)),
                ('volatility_24h', models.FloatField(blank=True, null=True)),
                ('drawdown_from_ath', models.FloatField(blank=True, null=True)),
                ('drawup_from_atl', models.FloatField(blank=True, null=True)),
                ('crypto', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infos', to='core.crypto')),
            ],
        ),
    ]
